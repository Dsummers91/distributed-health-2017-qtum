package main

import (
	"encoding/json"
	"fmt"
	"os/exec"
	"strings"
)

type Response struct {
	Version int `json:version"`
}

type Entity struct {
	datadir string
	rpcPort string
	address string
}

type CreateContractResponse struct {
	TransactionID string `json:"txid"`
	Sender        string `json:"sender"`
	Hash160       string `json:"hash160"`
	Address       string `json:"address"`
}

var mostRecentAddress string

var bin = ""

//function hashes
var createMilestone = "66eae86e"
var daysSinceInception = "11b5e6f0"
var endDate = "c24a0f8b"
var fund = "b60d4288"
var getIndividuals = "001a2d42"
var getInitializer = "3e104a95"
var getContractDetails = "543fs25"
var getMilestones = "629e4ed0"
var getNextMilestoneNum = "9f272ee2"
var getSponsors = "8ce900bd"
var getTotalMilestoneNum = "4258cb9e"
var individuals = "66542aa7"
var initializerFunction = "e1631c1b"
var milestones = "e89e4ed6"
var numMilestones = "cedece74"
var payoutMilestone = "b116619d" //finish contract
var sponsors = "93066b4"
var startDate = "0b97bc86"

func main() {
	startAPI() // Start Server
	var response Response

	out, err := exec.Command("qtum-cli", "--regtest", "-datadir=/home/deon/.qtum3", "-rpcport=2236", "getinfo").Output()
	if err != nil {
		fmt.Println(err.Error())
	}
	outAsString := string(out)
	text := strings.Replace(outAsString, "\n", "", -1)
	text = strings.Replace(text, " ", "", -1)

	err = json.Unmarshal([]byte(text), &response)
	fmt.Scanln()
}

func DeployContract() []byte {
	var response CreateContractResponse
	entity := getEntity(1)
	out, err := exec.Command("qtum-cli", "--regtest", entity.datadir, entity.rpcPort, "createcontract", bin, "381382").Output()
	if err != nil {
		fmt.Println(err.Error())
	}
	outAsString := string(out)
	text := strings.Replace(outAsString, "\n", "", -1)
	text = strings.Replace(text, " ", "", -1)
	fmt.Println(text)
	_ = json.Unmarshal([]byte(text), &response)
	mostRecentAddress = response.Address
	return []byte(text)
}

func (entity *Entity) getHexAddress() []byte {
	out, err := exec.Command("qtum-cli", "--regtest", entity.datadir, entity.rpcPort, "gethexaddress", "x").Output()
	if err != nil {
		fmt.Println(err.Error())
	}
	outAsString := string(out)
	text := strings.Replace(outAsString, "\n", "", -1)
	text = strings.Replace(text, " ", "", -1)
	return []byte(text)
}

func joinContractBlockchain(person int) []byte {
	isSponsor := "1"
	if person == 2 {
		isSponsor = "0"
	}
	entity := getEntity(person)

	out, err := exec.Command("ethabi", "encode", "function", "../contract/TheCollectiveABI.json", "joinCollective", "-p", isSponsor).Output()
	if err != nil {
		fmt.Println(err.Error())
	}
	outAsString := string(out)
	abiEncded := strings.Replace(outAsString, "\n", "", -1)
	abiEncded = strings.Replace(abiEncded, " ", "", -1)

	out, err = exec.Command("qtum-cli", "--regtest", entity.datadir, entity.rpcPort, "sendtocontract", mostRecentAddress, abiEncded).Output()
	if err != nil {
		fmt.Println(err.Error())
	}
	outAsString = string(out)
	text := strings.Replace(outAsString, "\n", "", -1)
	text = strings.Replace(text, " ", "", -1)
	return []byte(text)
}

func participateContractBlockchain() []byte {
	entity := getEntity(1)

	out, err := exec.Command("ethabi", "encode", "function", "../contract/TheCollectiveABI.json", mostRecentAddress, getContractDetails).Output()
	if err != nil {
		fmt.Println(err.Error())
	}
	outAsString := string(out)
	abiEncded := strings.Replace(outAsString, "\n", "", -1)
	abiEncded = strings.Replace(abiEncded, " ", "", -1)

	out, err = exec.Command("qtum-cli", "--regtest", entity.datadir, entity.rpcPort, "sendtocontract", mostRecentAddress, abiEncded).Output()
	if err != nil {
		fmt.Println(err.Error())
	}
	outAsString = string(out)
	text := strings.Replace(outAsString, "\n", "", -1)
	text = strings.Replace(text, " ", "", -1)
	return []byte(text)
}

func finishContractBlockchain() []byte {
	entity := getEntity(1)

	out, err := exec.Command("ethabi", "encode", "function", "../contract/TheCollectiveABI.json", "joinContract").Output()
	if err != nil {
		fmt.Println(err.Error())
	}
	outAsString := string(out)
	abiEncded := strings.Replace(outAsString, "\n", "", -1)
	abiEncded = strings.Replace(abiEncded, " ", "", -1)

	out, err = exec.Command("qtum-cli", "--regtest", entity.datadir, entity.rpcPort, "sendtocontract", mostRecentAddress, abiEncded).Output()
	if err != nil {
		fmt.Println(err.Error())
	}
	outAsString = string(out)
	text := strings.Replace(outAsString, "\n", "", -1)
	text = strings.Replace(text, " ", "", -1)
	return []byte(text)
}

func getContractInformationBlockchain() []byte {
	entity := getEntity(1)

	out, err := exec.Command("qtum-cli", "--regtest", entity.datadir, entity.rpcPort, "callcontract", mostRecentAddress).Output()
	if err != nil {
		fmt.Println(err.Error())
	}
	outAsString := string(out)
	text := strings.Replace(outAsString, "\n", "", -1)
	text = strings.Replace(text, " ", "", -1)
	return []byte(text)
}

func getEntity(person int) Entity {
	var entity Entity
	// Person One is Company
	if person == 1 {
		entity.rpcPort = "-datadir=/home/deon/.qtum3"
		entity.datadir = "-rpcport=2236"
	}
	// Personal Two is Participant
	if person == 2 {
		entity.rpcPort = "-datadir=/home/deon/.qtum1"
		entity.datadir = "-rpcport=2234"
	}
	// Personal Three is Friend
	if person == 3 {
		entity.rpcPort = "-datadir=/home/deon/.qtum4"
		entity.datadir = "-rpcport=2237"
	}
	entity.getHexAddress()
	return entity
}

func generateBlocks() {
	entity := getEntity(1)
	_, err := exec.Command("qtum-cli", "--regtest", entity.datadir, entity.rpcPort, "generate", "2").Output()
	if err != nil {
		fmt.Println(err.Error())
	}
	entity = getEntity(2)
	_, err = exec.Command("qtum-cli", "--regtest", entity.datadir, entity.rpcPort, "generate", "2").Output()
	if err != nil {
		fmt.Println(err.Error())
	}
	entity = getEntity(3)
	_, err = exec.Command("qtum-cli", "--regtest", entity.datadir, entity.rpcPort, "generate", "2").Output()
	if err != nil {
		fmt.Println(err.Error())
	}
}
